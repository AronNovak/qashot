<?php

/**
 * @file
 * Contains qa_shot.module..
 */

use \Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\qa_shot\Entity\QAShotTest;
use Drupal\qa_shot\Custom\Backstop;

/**
 * Implements hook_help().
 */
function qa_shot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the qa_shot module.
    case 'help.page.qa_shot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for test management.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function qa_shot_cron() {
  // @todo: run scheduled tests
}

/**
 * Implements hook_theme().
 */
function qa_shot_theme($existing, $type, $theme, $path) {
  return [
    'qa_shot__qa_shot_test__run' => [
      'template' => 'qa_shot_test--run',
      'variables' => [
        'entity' => NULL,
        'html_report_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function qa_shot_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  if (in_array($form_id, ["qa_shot_test_edit_form"])) {
    $form['actions']['run'] = array(
      '#type' => 'submit',
      '#value' => t('Run Test'),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
      // '#ajax' => ['callback' => [$this, 'ajaxCallback']], //.
      '#submit' => array("qa_shot_qa_shot_test_run_handler"),
    );
  }
}

/**
 * Handler function for the "Run test" button.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function qa_shot_qa_shot_test_run_handler(&$form, FormStateInterface $form_state) {
  /** @var QAShotTest $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $form_state->setRedirect(
    "entity.qa_shot_test.run",
    [
      "qa_shot_test" => $entity->id(),
    ],
    [
      'query' => [
        'start_now' => TRUE,
      ],
    ]
  );
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function qa_shot_qa_shot_test_delete(EntityInterface $entity) {
  $pubRemoveRes = Backstop::removePublicData($entity);
  $privRemoveRes = Backstop::removePrivateData($entity);

  dpm($privRemoveRes ? "PrivateFolder removed" : "Private folder not removed");
  dpm($pubRemoveRes ? "PubFolder removed" : "Pub folder not removed");
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function qa_shot_qa_shot_test_view(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display,
  $view_mode
) {
  // @todo: save paths in the entity

  // dpm($genResult["data"]["reportPath"], "report path");
  dpm(array(
    "entity_conf_path" => $entity->get('field_configuration_path')->value,
    "entity_report_path" => $entity->get('field_html_report_path')->value,
  ), "entity");

  // @todo: major cleanup and restructuring of the files
  // @todo: store paths in db

  // dpm($entity->getBackstopConfigurationPath(), "config path from entity");//.
}

/**
 * Helper function for running a complete testcase.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function _qa_shot_run_test_for_entity(EntityInterface $entity) {
  if (empty($entity) || !($entity instanceof QAShotTest)) {
    drupal_set_message(t("Trying to run test for an empty or invalid entity."), "error");
  }

  try {
    Backstop::initializeEnvironment($entity);
    // _qa_shot_initialize_backstop_environment($entity);
  }
  catch (\Exception $exception) {
    dpm($exception->getMessage(), "Exception at entity insert.");
  }

  if (empty($entity->field_configuration_path->getValue())) {
    dpm("Configuration path not saved in entity.");
    return;
  }

  $command = "reference";
  // $referenceResult = _qa_shot_run_backstop_command($command, $entity->get("field_configuration_path")->value);
  $referenceResult = Backstop::runReference($entity->get("field_configuration_path")->value);
  if (FALSE === $referenceResult) {
    dpm("Running the " . $command . " command has failed.");
    return;
  }

  $command = "test";
  // $testResult = _qa_shot_run_backstop_command($command, $entity->get("field_configuration_path")->value);
  $testResult = Backstop::runTest($entity->get("field_configuration_path")->value);
  if (FALSE === $testResult) {
    dpm("Running the " . $command . " command has failed.");
    return;
  }

}
