<?php

/**
 * @file
 * Contains qa_shot.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function qa_shot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the qa_shot module.
    case 'help.page.qa_shot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for test management.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function qa_shot_cron() {
  // @todo: run scheduled tests
}

/**
 * Implements hook_theme().
 */
function qa_shot_theme($existing, $type, $theme, $path) {
  return [
    'qa_shot__qa_shot_test__run' => [
      'template' => 'qa_shot_test--run',
      'variables' => [
        'entity_label' => NULL
      ]
    ]
  ];
}

/**
 * Implements hook_form_alter().
 */
function qa_shot_form_alter(
  &$form,
  \Drupal\Core\Form\FormStateInterface $form_state,
  $form_id
) {
  if (in_array($form_id, ["qa_shot_test_edit_form"])) {
    $form['actions']['run'] = array(
      '#type' => 'submit',
      '#value' => t('Run Test'),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
      // '#ajax' => ['callback' => [$this, 'ajaxCallback']],
      '#submit' => array("qa_shot_qa_shot_test_run_handler")
    );
  }
}

function qa_shot_qa_shot_test_run_handler(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();

  if (empty($entity->field_configuration_path->getValue())) {
    dpm("Configuration path not saved in entity.");
    return;
  }

  $command = "reference";
  if (FALSE === _qa_shot_run_backstop_command($command, $entity->field_configuration_path->value)) {
    dpm("Running the " . $command . " command has failed.");
    return;
  }

  $command = "test";
  if (FALSE === _qa_shot_run_backstop_command($command, $entity->field_configuration_path->value)) {
    dpm("Running the " . $command . " command has failed.");
    return;
  }

}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function qa_shot_qa_shot_test_insert(Drupal\Core\Entity\EntityInterface $entity) {
  $genResult = _qa_shot_initialize_backstop_environment($entity);
  dpm($genResult["success"] ? "SUCCESS" : "FAIL");
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function qa_shot_qa_shot_test_update(Drupal\Core\Entity\EntityInterface $entity) {
  $genResult = _qa_shot_initialize_backstop_environment($entity);
  dpm($genResult["success"] ? "SUCCESS" : "FAIL");
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function qa_shot_qa_shot_test_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // @todo: Delete BackstopJS config
  $drupalRootPath = realpath("."); // Absolute path to drupal root
  // @todo: cd to this, run backstop from there

  $privateDataPath = "qa_test_data/" . $entity->id(); // @todo: . "/" . revision id;
  $publicDataPath = "qa_test_data/" . $entity->id(); // @todo: . "/" . revision id;

  dpm(_qa_shot_remove_directory($drupalRootPath . "/" . $privateDataPath) ? "PrivateFolder removed" : "Private folder not removed");
  dpm(_qa_shot_remove_directory($drupalRootPath . "/" . $publicDataPath) ? "PubFolder removed" : "Pub folder not removed");
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function qa_shot_qa_shot_test_view(
  array &$build,
  \Drupal\Core\Entity\EntityInterface $entity,
  \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display,
  $view_mode
) {
  // @todo: save paths in the entity

  /*
  $command = "reference";
  if (FALSE === _qa_shot_run_backstop_command($command, $genResult["data"]["configPath"])) {
    dpm("Running the " . $command . " command has failed.");
  } else {
    $command = "test";
    if (FALSE === _qa_shot_run_backstop_command($command, $genResult["data"]["configPath"])) {
      dpm("Running the " . $command . " command has failed.");
    }
  }*/

  //dpm($genResult["data"]["reportPath"], "report path");
  dpm(array(
    "entity_conf_path" => $entity->field_configuration_path->value,
    "entity_report_path" => $entity->field_html_report_path->value
  ), "entity");
  /*
    $command = "openReport";
    if (FALSE === _qa_shot_run_backstop_command($command, $configPath)) {
      dpm("Running the " . $command . " command has failed.");
      return FALSE;
    }
  */

  // @todo: major cleanup and restructuring of the files
  // @todo: store paths in db

  // dpm($entity->getBackstopConfigurationPath(), "config path from entity");
}

/**
 * Function that initializes a backstop configuration for the entity.
 *    Creates the folder for the entity,
 *    Creates the backstop.json file,
 *    Copies template files to the proper directories,
 *    Saves some data to the entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return array
 */
function _qa_shot_initialize_backstop_environment(Drupal\Core\Entity\EntityInterface $entity) {
  $drupalRootPath = realpath("."); // Absolute path to drupal root
  // @todo: cd to this, run backstop from there
  dpm($drupalRootPath, "drupalRootPath");

  $privateDataPath = "qa_test_data/" . $entity->id(); // @todo: . "/" . revision id;
  $publicDataPath = "qa_test_data/" . $entity->id(); // @todo: . "/" . revision id;

  $templateFolder = $drupalRootPath . "/qa_test_data/template";

  $configAsArray = _qa_shot_map_entity_to_backstop_config_array($entity, $privateDataPath, $publicDataPath);
  //dpm($configAsArray);
  $jsonConfig = JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE;
  $configAsJSON = json_encode($configAsArray, $jsonConfig);

  //dpm($configAsJSON);
  //$configPath = $drupalRootPath . "/" . $privateDataPath . "/backstop.json";
  $configPath = $privateDataPath . "/backstop.json";

  $return = array(
    "success" => FALSE,
    "data" => array()
  );

  // Write config to file
  // @todo: maybe use drupal functions

  if (FALSE === _qa_shot_create_folder_for_entity($drupalRootPath . "/" . $privateDataPath . "/")) {
    dpm("Creating the qa_test_data/entityId folder failed.");
    return $return;
  }

  if (FALSE === _qa_shot_create_backstop_config_file($drupalRootPath . "/" . $configPath, $configAsJSON)) {
    dpm("Creating the qa_test_data/entityId/backstop.json file failed.");
    return $return;
  }

  if (FALSE === _qa_shot_create_folder_for_entity($drupalRootPath . "/" . $configAsArray["paths"]["casper_scripts"])) {
    dpm("Creating the qa_test_data/entityId/casper_scripts folder failed.");
    return $return;
  }

  if (FALSE === _qa_shot_copy_template_data($templateFolder . "/casper_scripts", $drupalRootPath . "/" . $configAsArray["paths"]["casper_scripts"])) {
    dpm("Copying the template files failed.");
    return $return;
  }

  $return["success"] = TRUE;
  $return["data"]["configPath"] = $configPath;
  $return["data"]["reportPath"] = $drupalRootPath . "/" . $configAsArray["paths"]["html_report"] . "/index.html";

  $entity->field_configuration_path->setValue($configPath);
  $entity->field_html_report_path->setValue($drupalRootPath . "/" . $configAsArray["paths"]["html_report"] . "/index.html");
  $entity->save();

  return $return;
}

function _qa_shot_run_backstop_command($command, $configurationPath) {
  // @todo: use exceptions instead of return bool
  if (!in_array($command, array("reference", "test"))) {
    return FALSE;
  }

  // @todo: send this to the background, don't hold up UI
  // @todo: create rout {entity}/run or smth
  // @todo /run should output current run / last run info, or smth

  /**
   * @todo: real-time output:
   *    http://stackoverflow.com/questions/1281140/run-process-with-realtime-output-in-php
   *    http://stackoverflow.com/questions/20614557/php-shell-exec-update-output-as-script-is-running
   *    http://stackoverflow.com/questions/20107147/php-reading-shell-exec-live-output
   */

  $backstopCommand = 'backstop ' . $command . ' --configPath=' . $configurationPath;
  // @todo: use escapeshellarg for good measure
  exec($backstopCommand, $execOutput, $status);

  dpm($status, "exec status");

  if ($status !== 0) {
    dpm($execOutput, "Output of exec.");

    return FALSE;
  }

  return TRUE;
}

/**
 * @param $src
 * @param $target
 * @return bool
 */
function _qa_shot_copy_template_data($src, $target) {
  dpm($src, "copy src");
  dpm($target, "copy target");

  if (($fileList = scandir($src)) === FALSE) {
    dpm("scandir failed");
    return FALSE;
  }

  // @todo: scandir target, if file is there and they are the same, skip the file

  $result = TRUE;

  foreach ($fileList as $file) {
    if (strpos($file, ".js") === FALSE) {
      continue;
    }

    $result |= copy($src . "/" . $file, $target . "/" . $file);
  }

  return $result;
}

/**
 * @param $configurationPath
 * @param $jsonString
 * @return bool
 */
function _qa_shot_create_backstop_config_file($configurationPath, $jsonString) {
  // @todo: maybe return array with successFlag and message for verbosity
  // @todo: maybe throw exceptions

  //@todo: check if file exists, if yes, check if it's the same as the new one.
  //        if yes, skip
  if (($configFile = fopen($configurationPath, "w")) === FALSE) {
    dpm("failed to open config file to write");
    return FALSE;
  }

  if (fwrite($configFile, $jsonString) === FALSE) {
    dpm("failed to write config file");
    return FALSE;
  }

  if (fclose($configFile) === FALSE) {
    dpm("failed to close config file");
    return FALSE;
  }

  dpm("config write success");

  return TRUE;
}

/**
 * @param $dirToCreate
 *  Path of the directory to be created.
 * @return bool
 *  Whether the folder exists or creating it succeeded.
 */
function _qa_shot_create_folder_for_entity($dirToCreate) {
  dpm($dirToCreate, "path of dir");
  if (is_dir($dirToCreate)) {
    dpm("dir is there");
    return TRUE;
  }

  dpm("creating dir");
  // Create parents as well

  return mkdir($dirToCreate, 0775, TRUE);
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *  The QAShot Test entity.
 * @param $privateDataPath
 *  Path to the private filesystem.
 * @param $publicDataPath
 *  Path to the public filesystem.
 * @return array
 *  A backstop config as an array.
 */
function _qa_shot_map_entity_to_backstop_config_array(Drupal\Core\Entity\EntityInterface $entity, $privateDataPath, $publicDataPath) {
  // @todo: get these field values global settings

  $mapConfigToArray = [
    "id" => $entity->id(), // @todo: maybe id + revision id
    "viewports" => [],
    "scenarios" => [],
    "paths" => [
      "bitmaps_reference" => $privateDataPath . "/reference",
      "bitmaps_test" => $privateDataPath . "/test",
      "casper_scripts" => $privateDataPath . "/casper_scripts",
      "html_report" => $publicDataPath . "/html_report",
      "ci_report" => $publicDataPath . "/ci_report",
    ],
    // "onBeforeScript" => "onBefore.js",
    // "onReadyScript" => "onReady.js",
    "engine" => "phantomjs",
    "report" => [
      //"CLI",
      "browser"
    ],
    "casperFlags" => [
      "--ignore-ssl-errors=true",
      "--ssl-protocol=any"
    ],
    "debug" => false,
  ];

  foreach ($entity->field_viewport as $viewport) {
    $mapConfigToArray["viewports"][] = _qa_shot_map_viewport_to_array($viewport);
  }

  foreach ($entity->field_scenario as $scenario) {
    $mapConfigToArray["scenarios"][] = _qa_shot_map_scenario_to_array($scenario);
  }

  $debugMode = false;
  if ($debugMode === true) {
    $mapConfigToArray['debug'] = true;
    $mapConfigToArray['casperFlags'][] = "--verbose";
  }

  return $mapConfigToArray;
}

/**
 * Converts the values of a scenarios field to a scenario array.
 *
 * @param $scenario
 * @return array
 */
function _qa_shot_map_scenario_to_array($scenario) {
  return array(
    "label" => (string) $scenario->label,
    "url" => (string) $scenario->referenceUrl,
    "referenceUrl" => (string) $scenario->testUrl,
    "readyEvent" => null,
    "delay" => 5000,
    "misMatchThreshold" => 0.0,
    "selectors" => [ "document" ],
    "removeSelectors" => [ "#twitter-widget-0", "#twitter-widget-1", ".captcha", "#sliding-popup" ],
    "hideSelectors" => [],
    "onBeforeScript" => "onBefore.js",
    "onReadyScript" => "onReady.js",
  );
}

/**
 * Converts the values of a viewport field to a viewport array.
 *
 * @param $viewport
 * @return array
 */
function _qa_shot_map_viewport_to_array($viewport) {
  return array(
    "name" => (string) $viewport->name,
    "width" => (int) $viewport->width,
    "height" => (int) $viewport->height,
  );
}

/**
 * @param $dir
 * @return bool
 */
function _qa_shot_remove_directory($dir) {
  if (!is_dir($dir)) {
    return TRUE;
  }

  $it = new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS);
  $files = new RecursiveIteratorIterator($it,
    RecursiveIteratorIterator::CHILD_FIRST);

  $result = TRUE;

  foreach($files as $file) {
    if ($file->isDir()){
      $result |= rmdir($file->getRealPath());
    } else {
      $result |= unlink($file->getRealPath());
    }
  }
  $result |= rmdir($dir);

  return $result;
}