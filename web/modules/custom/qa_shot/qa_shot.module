<?php

/**
 * @file
 * Contains qa_shot.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function qa_shot_help($route_name, RouteMatchInterface $route_match) {
  // Main module help for the qa_shot module.
  if ('help.page.qa_shot' === $route_name) {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Module for test management.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_theme().
 */
function qa_shot_theme() {
  $theme = [];
  $theme['qa_shot_test'] = array(
    'render element' => 'elements',
    'file' => 'qa_shot_test.page.inc',
    'template' => 'qa_shot_test',
  );
  $theme['qa_shot_test_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'qa_shot_test.page.inc',
  ];
  $theme['qa_shot__qa_shot_test__run'] = [
    'template' => 'qa_shot_test--run',
    'variables' => [
      'entity' => NULL,
      'html_report_url' => NULL,
      'report_time' => NULL,
      'queue_status' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function qa_shot_theme_suggestions_qa_shot_test(array $variables) {
  $suggestions = array();
  /** @var \Drupal\qa_shot\Entity\QAShotTest $entity */
  $entity = $variables['elements']['#qa_shot_test'];
  $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);

  $suggestions[] = 'qa_shot_test__' . $sanitized_view_mode;
  $suggestions[] = 'qa_shot_test__' . $entity->bundle();
  $suggestions[] = 'qa_shot_test__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'qa_shot_test__' . $entity->id();
  $suggestions[] = 'qa_shot_test__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_mail().
 */
function qa_shot_mail($key, &$message, $params) {
  switch ($key) {
    case 'qashot_test_notification':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function qa_shot_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  // Display the run button on QAShot edit forms only.
  if (strpos($form_id, 'qa_shot_test') !== FALSE && strpos($form_id, 'edit_form') !== FALSE) {
    $form['actions']['run'] = array(
      '#type' => 'submit',
      '#value' => t('Add test to queue'),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
      // '#ajax' => ['callback' => [$this, 'ajaxCallback']], //.
      '#submit' => array("qa_shot_qa_shot_test_run_handler"),
    );
  }
}

/**
 * Handler function for the "Run test" button.
 *
 * {@inheritdoc}
 */
function qa_shot_qa_shot_test_run_handler(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\qa_shot\Entity\QAShotTest $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $form_state->setRedirect(
    'entity.qa_shot_test.add_to_queue',
    [
      'qa_shot_test' => $entity->id(),
    ]
  );
}
